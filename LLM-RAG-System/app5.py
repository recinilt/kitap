# app.py - Gradio'nun kendi dosya seÃ§icilerini kullanan sÃ¼rÃ¼m
import gradio as gr
from rag_system import RAGSystem
import os
import time

# RAG sistemini oluÅŸtur
rag_system = RAGSystem()
system_initialized = False

def initialize_system():
    global rag_system, system_initialized
    try:
        rag_system.initialize()
        system_initialized = True
        return "Sistem baÅŸarÄ±yla baÅŸlatÄ±ldÄ±. LLM ve vektÃ¶r veritabanÄ± yÃ¼klendi."
    except Exception as e:
        return f"Sistem baÅŸlatÄ±lÄ±rken hata oluÅŸtu: {str(e)}"

def process_directory(directory):
    global rag_system, system_initialized
    if not system_initialized:
        return "Ã–nce sistemi baÅŸlatmalÄ±sÄ±nÄ±z!"
    
    if not directory or not os.path.isdir(directory):
        return f"GeÃ§erli bir dizin seÃ§ilmedi veya dizin bulunamadÄ±."
    
    try:
        start_time = time.time()
        doc_count = rag_system.process_documents(directory)
        elapsed_time = time.time() - start_time
        return f"{doc_count} dokÃ¼man parÃ§asÄ± baÅŸarÄ±yla iÅŸlendi ve vektÃ¶r veritabanÄ±na kaydedildi. ({elapsed_time:.2f} saniye)"
    except Exception as e:
        return f"Hata: {str(e)}"

def process_file(file_paths):
    global rag_system, system_initialized
    
    if not system_initialized:
        return "Ã–nce sistemi baÅŸlatmalÄ±sÄ±nÄ±z!"
    
    if not file_paths:
        return "HiÃ§bir dosya seÃ§ilmedi."
    
    try:
        total_docs = 0
        start_time = time.time()
        
        for file_path in file_paths:
            doc_count = rag_system.process_single_document(file_path.name)
            total_docs += doc_count
            
        elapsed_time = time.time() - start_time
        return f"Toplam {total_docs} dokÃ¼man parÃ§asÄ± baÅŸarÄ±yla iÅŸlendi ve vektÃ¶r veritabanÄ±na kaydedildi. ({elapsed_time:.2f} saniye)"
    except Exception as e:
        return f"Hata: {str(e)}"

def query_system(question):
    global rag_system, system_initialized
    if not system_initialized:
        return "Ã–nce sistemi baÅŸlatmalÄ±sÄ±nÄ±z!"
    
    try:
        start_time = time.time()
        result = rag_system.query(question)
        elapsed_time = time.time() - start_time
        
        answer = result["answer"]
        sources = "\n\n**KAYNAKLAR:**\n"
        for i, doc in enumerate(result["source_documents"][:3]):
            sources += f"- Belge {i+1}: {doc.metadata.get('source', 'Bilinmeyen')}\n"
        
        return f"{answer}\n\n---\nÄ°ÅŸlem sÃ¼resi: {elapsed_time:.2f} saniye\n{sources}"
    except Exception as e:
        return f"Sorgu iÅŸlenirken hata oluÅŸtu: {str(e)}"

def process_transcripts_directory(transcript_dir, series_name, num_episodes):
    """Video transkript klasÃ¶rÃ¼nÃ¼ iÅŸleyip kitaplaÅŸtÄ±rÄ±r"""
    global rag_system, system_initialized
    
    if not system_initialized:
        return "Ã–nce sistemi baÅŸlatmalÄ±sÄ±nÄ±z!"
    
    if not transcript_dir or not os.path.isdir(transcript_dir):
        return f"GeÃ§erli bir transkript dizini seÃ§ilmedi veya bulunamadÄ±."
    
    try:
        # Ã–nce transkript klasÃ¶rÃ¼nÃ¼ iÅŸle
        start_time = time.time()
        doc_count = rag_system.process_documents(transcript_dir)
        
        # SayÄ± doÄŸrulamasÄ±nÄ± iyileÅŸtir
        if isinstance(num_episodes, str):
            num_episodes = num_episodes.strip()
            if num_episodes == "":
                num_episodes = 1
            else:
                try:
                    num_episodes = float(num_episodes)
                except:
                    num_episodes = 1
        
        num_eps = int(num_episodes)
        if num_eps <= 0:
            num_eps = 1  # En az 1 video olmalÄ±
            
        prompt = f"""'{series_name}' baÅŸlÄ±klÄ± {num_eps} bÃ¶lÃ¼mlÃ¼k video serisini edebi bir dille kitaplaÅŸtÄ±r. 
        KitabÄ±, yayÄ±nlanabilir kalitede edebi bir dille yaz. 
        Ä°Ã§indekiler, tanÄ±mlar, bÃ¶lÃ¼mler ve alt baÅŸlÄ±klar iÃ§eren tutarlÄ±, bÃ¼tÃ¼nlÃ¼klÃ¼ ve tekrarsÄ±z bir kitap formatÄ±nda dÃ¼zenle.
        Tek bÃ¶lÃ¼mlÃ¼k olsa da, iÃ§eriÄŸi zenginleÅŸtir ve derinleÅŸtir.
        Kitap formatÄ± ÅŸu ÅŸekilde olsun:
        1. Kapak sayfasÄ± ve kitap baÅŸlÄ±ÄŸÄ±
        2. Ä°Ã§indekiler
        3. GiriÅŸ bÃ¶lÃ¼mÃ¼ ve konuya genel bakÄ±ÅŸ
        4. Ana bÃ¶lÃ¼mler (kavramsal olarak dÃ¼zenlenmiÅŸ)
        5. Alt baÅŸlÄ±klar ve detaylÄ± aÃ§Ä±klamalar
        6. SonuÃ§ ve Ã¶zet bÃ¶lÃ¼mÃ¼
        YayÄ±nlanacak kalitede, akÄ±cÄ±, edebi bir dil kullan."""
        
        result = rag_system.query(prompt)
        elapsed_time = time.time() - start_time
        
        # Dosyaya kaydet
        file_name = f"{series_name.replace(' ', '_')}_kitap.txt"
        with open(file_name, "w", encoding="utf-8") as f:
            f.write(result["answer"])
        
        return f"Transkript klasÃ¶rÃ¼ baÅŸarÄ±yla iÅŸlendi ({doc_count} parÃ§a).\n\n{result['answer']}\n\n---\nToplam iÅŸlem sÃ¼resi: {elapsed_time:.2f} saniye\nÄ°Ã§erik '{file_name}' dosyasÄ±na kaydedildi."
    
    except Exception as e:
        return f"Transkript iÅŸleme veya kitaplaÅŸtÄ±rma sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}"

def process_transcript_files(file_paths, series_name, num_episodes):
    """Transkript dosyalarÄ±nÄ± iÅŸleyip kitaplaÅŸtÄ±rÄ±r"""
    global rag_system, system_initialized
    
    if not system_initialized:
        return "Ã–nce sistemi baÅŸlatmalÄ±sÄ±nÄ±z!"
    
    if not file_paths:
        return "HiÃ§bir transkript dosyasÄ± seÃ§ilmedi."
    
    try:
        # Ã–nce transkript dosyalarÄ±nÄ± iÅŸle
        start_time = time.time()
        total_docs = 0
        
        for file_path in file_paths:
            doc_count = rag_system.process_single_document(file_path.name)
            total_docs += doc_count
        
        # SayÄ± doÄŸrulamasÄ±nÄ± iyileÅŸtir
        if isinstance(num_episodes, str):
            num_episodes = num_episodes.strip()
            if num_episodes == "":
                num_episodes = 1
            else:
                try:
                    num_episodes = float(num_episodes)
                except:
                    num_episodes = 1
        
        num_eps = int(num_episodes)
        if num_eps <= 0:
            num_eps = 1  # En az 1 video olmalÄ±
            
        prompt = f"""'{series_name}' baÅŸlÄ±klÄ± {num_eps} bÃ¶lÃ¼mlÃ¼k video serisini edebi bir dille kitaplaÅŸtÄ±r. 
        KitabÄ±, yayÄ±nlanabilir kalitede edebi bir dille yaz. 
        Ä°Ã§indekiler, tanÄ±mlar, bÃ¶lÃ¼mler ve alt baÅŸlÄ±klar iÃ§eren tutarlÄ±, bÃ¼tÃ¼nlÃ¼klÃ¼ ve tekrarsÄ±z bir kitap formatÄ±nda dÃ¼zenle.
        Tek bÃ¶lÃ¼mlÃ¼k olsa da, iÃ§eriÄŸi zenginleÅŸtir ve derinleÅŸtir.
        Kitap formatÄ± ÅŸu ÅŸekilde olsun:
        1. Kapak sayfasÄ± ve kitap baÅŸlÄ±ÄŸÄ±
        2. Ä°Ã§indekiler
        3. GiriÅŸ bÃ¶lÃ¼mÃ¼ ve konuya genel bakÄ±ÅŸ
        4. Ana bÃ¶lÃ¼mler (kavramsal olarak dÃ¼zenlenmiÅŸ)
        5. Alt baÅŸlÄ±klar ve detaylÄ± aÃ§Ä±klamalar
        6. SonuÃ§ ve Ã¶zet bÃ¶lÃ¼mÃ¼
        YayÄ±nlanacak kalitede, akÄ±cÄ±, edebi bir dil kullan."""
        
        result = rag_system.query(prompt)
        elapsed_time = time.time() - start_time
        
        # Dosyaya kaydet
        file_name = f"{series_name.replace(' ', '_')}_kitap.txt"
        with open(file_name, "w", encoding="utf-8") as f:
            f.write(result["answer"])
        
        return f"Transkript dosyalarÄ± baÅŸarÄ±yla iÅŸlendi ({total_docs} parÃ§a).\n\n{result['answer']}\n\n---\nToplam iÅŸlem sÃ¼resi: {elapsed_time:.2f} saniye\nÄ°Ã§erik '{file_name}' dosyasÄ±na kaydedildi."
    
    except Exception as e:
        return f"Transkript iÅŸleme veya kitaplaÅŸtÄ±rma sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}"

def create_book_from_videos(series_name, num_episodes):
    global rag_system, system_initialized
    if not system_initialized:
        return "Ã–nce sistemi baÅŸlatmalÄ±sÄ±nÄ±z!"
    
    try:
        # FarklÄ± formatlardaki giriÅŸ deÄŸerlerini dÃ¼zgÃ¼n bir ÅŸekilde iÅŸle
        if isinstance(num_episodes, str):
            num_episodes = num_episodes.strip()
            if num_episodes == "":
                num_episodes = 1
            else:
                try:
                    num_episodes = float(num_episodes)
                except:
                    num_episodes = 1
        
        num_eps = int(num_episodes)
        if num_eps <= 0:
            num_eps = 1  # En az 1 video olmalÄ±
            
        prompt = f"""'{series_name}' baÅŸlÄ±klÄ± {num_eps} bÃ¶lÃ¼mlÃ¼k video serisini edebi bir dille kitaplaÅŸtÄ±r. 
        KitabÄ±, yayÄ±nlanabilir kalitede edebi bir dille yaz. 
        Ä°Ã§indekiler, tanÄ±mlar, bÃ¶lÃ¼mler ve alt baÅŸlÄ±klar iÃ§eren tutarlÄ±, bÃ¼tÃ¼nlÃ¼klÃ¼ ve tekrarsÄ±z bir kitap formatÄ±nda dÃ¼zenle.
        Tek bÃ¶lÃ¼mlÃ¼k olsa da, iÃ§eriÄŸi zenginleÅŸtir ve derinleÅŸtir.
        Kitap formatÄ± ÅŸu ÅŸekilde olsun:
        1. Kapak sayfasÄ± ve kitap baÅŸlÄ±ÄŸÄ±
        2. Ä°Ã§indekiler
        3. GiriÅŸ bÃ¶lÃ¼mÃ¼ ve konuya genel bakÄ±ÅŸ
        4. Ana bÃ¶lÃ¼mler (kavramsal olarak dÃ¼zenlenmiÅŸ)
        5. Alt baÅŸlÄ±klar ve detaylÄ± aÃ§Ä±klamalar
        6. SonuÃ§ ve Ã¶zet bÃ¶lÃ¼mÃ¼
        YayÄ±nlanacak kalitede, akÄ±cÄ±, edebi bir dil kullan."""
        
        start_time = time.time()
        result = rag_system.query(prompt)
        elapsed_time = time.time() - start_time
        
        # Dosyaya kaydet
        file_name = f"{series_name.replace(' ', '_')}_kitap.txt"
        with open(file_name, "w", encoding="utf-8") as f:
            f.write(result["answer"])
        
        return f"{result['answer']}\n\n---\nÄ°ÅŸlem sÃ¼resi: {elapsed_time:.2f} saniye\nÄ°Ã§erik '{file_name}' dosyasÄ±na kaydedildi."
    except Exception as e:
        return f"KitaplaÅŸtÄ±rma iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu: {str(e)}"

# Gradio arayÃ¼zÃ¼
with gr.Blocks(title="LLM+RAG+FAISS Sistemi") as demo:
    gr.Markdown("# ğŸ“š LLM+RAG+FAISS Edebi Ä°Ã§erik Ãœretim Sistemi")
    
    with gr.Tab("Sistem BaÅŸlatma"):
        gr.Markdown("## Sistem BaÅŸlatma")
        init_button = gr.Button("Sistemi BaÅŸlat")
        init_output = gr.Textbox(label="Durum")
        init_button.click(initialize_system, inputs=[], outputs=[init_output])
    
    with gr.Tab("DokÃ¼man Ä°ÅŸleme"):
        gr.Markdown("## DokÃ¼man Ä°ÅŸleme")
        with gr.Row():
            with gr.Column():
                dir_input = gr.Textbox(label="DokÃ¼man Dizini Yolu")
                dir_button = gr.Button("Dizini Ä°ÅŸle")
            with gr.Column():
                file_input = gr.File(label="DokÃ¼man DosyalarÄ±", file_count="multiple")
                file_button = gr.Button("DosyalarÄ± Ä°ÅŸle")
        process_output = gr.Textbox(label="Ä°ÅŸlem Sonucu")
        
        dir_button.click(process_directory, inputs=[dir_input], outputs=[process_output])
        file_button.click(process_file, inputs=[file_input], outputs=[process_output])
    
    with gr.Tab("Sorgu & Ã–zet"):
        gr.Markdown("## Sorgu Yapma / Ã–zet OluÅŸturma")
        query_input = gr.Textbox(label="Sorgunuz veya Ã–zet Ä°steÄŸiniz", lines=3)
        query_button = gr.Button("Sorguyu GÃ¶nder")
        query_output = gr.Markdown(label="YanÄ±t")
        query_button.click(query_system, inputs=[query_input], outputs=[query_output])
    
    with gr.Tab("Video KitaplaÅŸtÄ±rma"):
        gr.Markdown("## Video Serisi KitaplaÅŸtÄ±rma")
        
        series_name = gr.Textbox(label="Video Serisi AdÄ±", value="")
        num_episodes = gr.Number(label="Video SayÄ±sÄ±", minimum=1, step=1, value=1, precision=0)
        
        with gr.Accordion("Mevcut Verilerle KitaplaÅŸtÄ±rma", open=True):
            book_button = gr.Button("Mevcut Verilerle KitaplaÅŸtÄ±r")
        
        with gr.Accordion("Transkript KlasÃ¶rÃ¼nden KitaplaÅŸtÄ±rma", open=False):
            trans_dir_input = gr.Textbox(label="Transkript KlasÃ¶rÃ¼ Yolu")
            trans_dir_process = gr.Button("KlasÃ¶rÃ¼ Ä°ÅŸle ve KitaplaÅŸtÄ±r")
        
        with gr.Accordion("Transkript DosyalarÄ±ndan KitaplaÅŸtÄ±rma", open=False):
            trans_file_input = gr.File(label="Transkript DosyalarÄ±", file_count="multiple")
            trans_file_process = gr.Button("DosyalarÄ± Ä°ÅŸle ve KitaplaÅŸtÄ±r")
        
        book_output = gr.Markdown(label="OluÅŸturulan Kitap")
        
        # KitaplaÅŸtÄ±rma iÅŸlemleri
        book_button.click(create_book_from_videos, inputs=[series_name, num_episodes], outputs=[book_output])
        trans_dir_process.click(process_transcripts_directory, inputs=[trans_dir_input, series_name, num_episodes], outputs=[book_output])
        trans_file_process.click(process_transcript_files, inputs=[trans_file_input, series_name, num_episodes], outputs=[book_output])

if __name__ == "__main__":
    demo.launch(share=False, server_name="127.0.0.1", server_port=7860)